diff --git a/run.py b/run.py
index 4996dbd..4dec229 100644
--- a/run.py
+++ b/run.py
@@ -155,10 +155,10 @@ def get_depot_tools(source_dir, fetch=False):
     dir = os.path.join(source_dir, 'depot_tools')
     if os.path.exists(dir):
         if fetch:
-            cmd(['git', 'fetch'])
+            cmd(['git', 'fetch','--depth','1'])
             cmd(['git', 'checkout', '-f', 'origin/HEAD'])
     else:
-        cmd(['git', 'clone', 'https://chromium.googlesource.com/chromium/tools/depot_tools.git', dir])
+        cmd(['git', 'clone','--depth','1', 'https://chromium.googlesource.com/chromium/tools/depot_tools.git', dir])
     return dir
 
 
@@ -269,7 +269,7 @@ def get_webrtc(source_dir, patch_dir, version, target,
     if not os.path.exists(os.path.join(webrtc_source_dir, 'src')):
         with cd(webrtc_source_dir):
             cmd(['gclient'])
-            cmd(['fetch', 'webrtc'])
+            cmd(['fetch', '--no-history', '--nohooks', 'webrtc'])
             if target == 'android':
                 with open('.gclient', 'a') as f:
                     f.write("target_os = [ 'android' ]\n")
@@ -284,7 +284,7 @@ def get_webrtc(source_dir, patch_dir, version, target,
             cmd(['git', 'fetch'])
             cmd(['git', 'checkout', '-f', version])
             cmd(['git', 'clean', '-df'])
-            cmd(['gclient', 'sync', '-D', '--force', '--reset', '--with_branch_heads'])
+            cmd(['gclient', 'sync', '-D', '--force', '--reset', '--with_branch_heads', '--no-history', '--nohooks',])
             for patch in PATCHES[target]:
                 depth, dirs = PATCH_INFO.get(patch, (1, ['.']))
                 dir = os.path.join(src_dir, *dirs)
@@ -991,18 +991,18 @@ def main():
 
     if args.target == 'windows':
         # Windows の WebRTC ビルドに必要な環境変数の設定
-        mkdir_p(build_dir)
-        download("https://github.com/microsoft/vswhere/releases/download/2.8.4/vswhere.exe", build_dir)
-        path = cmdcap([os.path.join(build_dir, 'vswhere.exe'), '-latest',
-                       '-products', '*',
-                       '-requires', 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
-                       '-property', 'installationPath'])
-        if len(path) == 0:
-            raise Exception('Visual Studio not installed')
-        path = os.path.join(path, 'Common7', 'Tools', 'VsDevCmd.bat')
-        stdout = cmdcap(['cmd', '/c', f'{path}', '&&', 'set'])
-        for m in re.finditer(r'(\w+)=(.*)', stdout):
-            os.environ[m.group(1)] = m.group(2)
+        # mkdir_p(build_dir)
+        # download("https://github.com/microsoft/vswhere/releases/download/2.8.4/vswhere.exe", build_dir)
+        # path = cmdcap([os.path.join(build_dir, 'vswhere.exe'), '-latest',
+        #                '-products', '*',
+        #                '-requires', 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
+        #                '-property', 'installationPath'])
+        # if len(path) == 0:
+        #     raise Exception('Visual Studio not installed')
+        # path = os.path.join(path, 'Common7', 'Tools', 'VsDevCmd.bat')
+        # stdout = cmdcap(['cmd', '/c', f'{path}', '&&', 'set'])
+        # for m in re.finditer(r'(\w+)=(.*)', stdout):
+        #     os.environ[m.group(1)] = m.group(2)
 
         os.environ['GYP_MSVS_VERSION'] = "2019"
         os.environ['DEPOT_TOOLS_WIN_TOOLCHAIN'] = "0"
